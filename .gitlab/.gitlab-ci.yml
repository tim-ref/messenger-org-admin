include:
  - project: 'akquinet/health/timref/gitlab-ci-job-templates'
    ref: v0.0.6
    file:
      - '/templates/defaults.yaml'
      - '/templates/jobs/build-docker-image.yaml'
      - '/templates/jobs/package-helm.yaml'

stages:
  - setup
  - test
  - build
  - package
  - deploy

default:
  tags:
    - eu

env-project-version:
  stage: setup
  image: registry-dockerhub.au.timref.akquinet.nx2.dev/node:18
  cache:
    paths:
      - node_modules/
  script:
    - TEMP_PROJECT_VERSION=$(node -p "require('./package.json').version")
    - echo "ENV_PROJECT_VERSION=${TEMP_PROJECT_VERSION}" > versions
    - echo "ENV_ARTIFACT_VERSION=${TEMP_PROJECT_VERSION}-${CI_COMMIT_SHORT_SHA}" > versions
  artifacts:
    reports:
      dotenv:
        - versions

test:
  stage: test
  image: registry-dockerhub.au.timref.akquinet.nx2.dev/node:18
  cache:
    paths:
      - node_modules/
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    paths:
      - coverage/
  script:
    - rm -rf cache
    - rm -rf .cypress_cache
    - yarn install --frozen-lockfile
    - yarn test --watchAll=false --coverage
    - yarn build

sonarqube-check:
  stage: test
  image:
    name: registry-dockerhub.au.timref.akquinet.nx2.dev/sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  script:
    - sonar-scanner
  allow_failure: true
  needs:
    - test

e2e:
  stage: test
  image: registry-dockerhub.au.timref.akquinet.nx2.dev/cypress/browsers:node-18.16.0-chrome-113.0.5672.92-1-ff-113.0-edge-113.0.1774.35-1
  variables:
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/.cypress_cache"
  cache:
    paths:
      - .cypress_cache
      - node_modules/
      - e2e/node_modules
  artifacts:
    when: always
    paths:
      - e2e/cypress/screenshots
      - e2e/cypress/videos
  script:
    - yarn install
    - yarn e2e

build:
  stage: build
  extends: .build-docker-image
  variables:
    DOCKER_IMAGE_NAME_SPREE: $CI_REGISTRY_IMAGE/org-admin-client
    DOCKER_TAG: $ENV_ARTIFACT_VERSION
    DOCKER_BUILD_ARGS: >-
      --build-arg REACT_APP_VERSION=${ENV_PROJECT_VERSION}
      --build-arg REACT_APP_COMMIT_SHA=${CI_COMMIT_SHORT_SHA}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "ru-dev"

package-helm-chart:
  extends: .package-helm-chart
  stage: package
  variables:
    HELM_VERSION: $ENV_ARTIFACT_VERSION
    PUSH_TO_SPREE: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "ru-dev"


##################
## Deploy EU/RU ##
##################
.deploy-to-environment:
  stage: deploy
  variables:
    UPSTREAM_CI_APPLICATION_NAME: org_admin_client
    UPSTREAM_CI_APPLICATION_VERSION: $ENV_ARTIFACT_VERSION
  trigger:
    project: 'akquinet/health/timref/client-apps'
    strategy: depend

deploy-to-eu:
  extends: .deploy-to-environment
  environment:
    name: EU
    url: https://org-admin-client.eu.timref.akquinet.nx2.dev
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    UPSTREAM_CI_ENVIRONMENT: eu

deploy-to-ru-dev:
  extends: .deploy-to-environment
  environment:
    name: RU-dev
    url: https://org-admin-client.ru-dev.timref.akquinet.nx2.dev
  rules:
    - if: $CI_COMMIT_BRANCH == "ru-dev"
  when: manual
  variables:
    UPSTREAM_CI_ENVIRONMENT: ru-dev

deploy-to-ru:
  extends: .deploy-to-environment
  environment:
    name: RU
    url: https://org-admin-client.ru.timref.akquinet.nx2.dev
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
  variables:
    UPSTREAM_CI_ENVIRONMENT: ru
